name: Run Mabl Tests from CSV File

on:
  workflow_dispatch:

jobs:
  get-mabl-data:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get_data.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Read Mabl Data from CSV
        id: get_data
        run: |
          # Read the CSV file, skipping the header line and removing any carriage return characters.
          # The 'tr -d "\r"' command is crucial for handling files created on different operating systems.
          CSV_DATA=$(tail -n +2 mabl_test_ids.csv | tr -d '\r')
          
          # Check if the CSV data is empty. If so, create an empty JSON array.
          # This prevents the 'fromJSON' error in the next job.
          if [ -z "$CSV_DATA" ]; then
            echo "Warning: CSV file is empty or only contains a header. Skipping matrix creation."
            # Set the output to an empty array so the next job runs but does nothing.
            MATRIX_JSON='{"include":[]}'
          else
            # Process each line to create a valid JSON object.
            # Using jq to build the final JSON object is more reliable.
            MATRIX_JSON=$(echo "$CSV_DATA" | awk -F',' '{print "{\"test_id\":\""$1"\", \"environment_id\":\""$2"\"}"}' | jq -s '{"include": .}')
          fi
          
          # Set the output for the next job to consume using a multi-line format.
          # This is the recommended and most reliable way to handle complex outputs.
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  mabl-local:
    runs-on: ubuntu-latest
    needs: get-mabl-data
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.get-mabl-data.outputs.matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Mabl CLI
        run: npm install -g @mablhq/mabl-cli

      - name: Run Test Locally
        run: |
          # Install a virtual screen to allow headed browser execution
          sudo apt-get update
          sudo apt-get install -y xvfb
          
          echo "Running Test ID: ${{ matrix.test_id }} with Environment ID: ${{ matrix.environment_id }}"
          mabl auth activate-key ${{ secrets.MABL_API_KEY }}
          
          # Use xvfb-run to launch the test in headed mode
          xvfb-run mabl tests run --id ${{ matrix.test_id }} --environment-id ${{ matrix.environment_id }}